// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: nutmeg/events.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Events_UserCreated_FullMethodName      = "/optiswift.proto.nutmeg.Events/UserCreated"
	Events_Payout_FullMethodName           = "/optiswift.proto.nutmeg.Events/Payout"
	Events_Topup_FullMethodName            = "/optiswift.proto.nutmeg.Events/Topup"
	Events_InternalTransfer_FullMethodName = "/optiswift.proto.nutmeg.Events/InternalTransfer"
)

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	UserCreated(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoyaltyResponse, error)
	Payout(ctx context.Context, in *PayoutTransaction, opts ...grpc.CallOption) (*LoyaltyResponse, error)
	Topup(ctx context.Context, in *TopupTransaction, opts ...grpc.CallOption) (*LoyaltyResponse, error)
	InternalTransfer(ctx context.Context, in *InternalTransferTransaction, opts ...grpc.CallOption) (*LoyaltyResponse, error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) UserCreated(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoyaltyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoyaltyResponse)
	err := c.cc.Invoke(ctx, Events_UserCreated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Payout(ctx context.Context, in *PayoutTransaction, opts ...grpc.CallOption) (*LoyaltyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoyaltyResponse)
	err := c.cc.Invoke(ctx, Events_Payout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) Topup(ctx context.Context, in *TopupTransaction, opts ...grpc.CallOption) (*LoyaltyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoyaltyResponse)
	err := c.cc.Invoke(ctx, Events_Topup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) InternalTransfer(ctx context.Context, in *InternalTransferTransaction, opts ...grpc.CallOption) (*LoyaltyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoyaltyResponse)
	err := c.cc.Invoke(ctx, Events_InternalTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility.
type EventsServer interface {
	UserCreated(context.Context, *User) (*LoyaltyResponse, error)
	Payout(context.Context, *PayoutTransaction) (*LoyaltyResponse, error)
	Topup(context.Context, *TopupTransaction) (*LoyaltyResponse, error)
	InternalTransfer(context.Context, *InternalTransferTransaction) (*LoyaltyResponse, error)
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventsServer struct{}

func (UnimplementedEventsServer) UserCreated(context.Context, *User) (*LoyaltyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreated not implemented")
}
func (UnimplementedEventsServer) Payout(context.Context, *PayoutTransaction) (*LoyaltyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payout not implemented")
}
func (UnimplementedEventsServer) Topup(context.Context, *TopupTransaction) (*LoyaltyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Topup not implemented")
}
func (UnimplementedEventsServer) InternalTransfer(context.Context, *InternalTransferTransaction) (*LoyaltyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalTransfer not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}
func (UnimplementedEventsServer) testEmbeddedByValue()                {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	// If the following call pancis, it indicates UnimplementedEventsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_UserCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).UserCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_UserCreated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).UserCreated(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Payout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayoutTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Payout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_Payout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Payout(ctx, req.(*PayoutTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_Topup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopupTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).Topup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_Topup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).Topup(ctx, req.(*TopupTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_InternalTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalTransferTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).InternalTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Events_InternalTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).InternalTransfer(ctx, req.(*InternalTransferTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "optiswift.proto.nutmeg.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreated",
			Handler:    _Events_UserCreated_Handler,
		},
		{
			MethodName: "Payout",
			Handler:    _Events_Payout_Handler,
		},
		{
			MethodName: "Topup",
			Handler:    _Events_Topup_Handler,
		},
		{
			MethodName: "InternalTransfer",
			Handler:    _Events_InternalTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nutmeg/events.proto",
}
