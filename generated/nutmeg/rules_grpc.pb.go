// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: rules.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuleService_ActivateRule_FullMethodName     = "/optiswift.proto.nutmeg.RuleService/ActivateRule"
	RuleService_GetCurrencyRules_FullMethodName = "/optiswift.proto.nutmeg.RuleService/GetCurrencyRules"
	RuleService_GetCurrencyRule_FullMethodName  = "/optiswift.proto.nutmeg.RuleService/GetCurrencyRule"
)

// RuleServiceClient is the client API for RuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleServiceClient interface {
	ActivateRule(ctx context.Context, in *ActivateRuleRequest, opts ...grpc.CallOption) (*BooleanResponse, error)
	GetCurrencyRules(ctx context.Context, in *GetCurrencyRulesRequest, opts ...grpc.CallOption) (*GetCurrencyRulesResponse, error)
	GetCurrencyRule(ctx context.Context, in *GetCurrencyRuleRequest, opts ...grpc.CallOption) (*GetCurrencyRuleResponse, error)
}

type ruleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleServiceClient(cc grpc.ClientConnInterface) RuleServiceClient {
	return &ruleServiceClient{cc}
}

func (c *ruleServiceClient) ActivateRule(ctx context.Context, in *ActivateRuleRequest, opts ...grpc.CallOption) (*BooleanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, RuleService_ActivateRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetCurrencyRules(ctx context.Context, in *GetCurrencyRulesRequest, opts ...grpc.CallOption) (*GetCurrencyRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrencyRulesResponse)
	err := c.cc.Invoke(ctx, RuleService_GetCurrencyRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleServiceClient) GetCurrencyRule(ctx context.Context, in *GetCurrencyRuleRequest, opts ...grpc.CallOption) (*GetCurrencyRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrencyRuleResponse)
	err := c.cc.Invoke(ctx, RuleService_GetCurrencyRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServiceServer is the server API for RuleService service.
// All implementations must embed UnimplementedRuleServiceServer
// for forward compatibility.
type RuleServiceServer interface {
	ActivateRule(context.Context, *ActivateRuleRequest) (*BooleanResponse, error)
	GetCurrencyRules(context.Context, *GetCurrencyRulesRequest) (*GetCurrencyRulesResponse, error)
	GetCurrencyRule(context.Context, *GetCurrencyRuleRequest) (*GetCurrencyRuleResponse, error)
	mustEmbedUnimplementedRuleServiceServer()
}

// UnimplementedRuleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuleServiceServer struct{}

func (UnimplementedRuleServiceServer) ActivateRule(context.Context, *ActivateRuleRequest) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateRule not implemented")
}
func (UnimplementedRuleServiceServer) GetCurrencyRules(context.Context, *GetCurrencyRulesRequest) (*GetCurrencyRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyRules not implemented")
}
func (UnimplementedRuleServiceServer) GetCurrencyRule(context.Context, *GetCurrencyRuleRequest) (*GetCurrencyRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyRule not implemented")
}
func (UnimplementedRuleServiceServer) mustEmbedUnimplementedRuleServiceServer() {}
func (UnimplementedRuleServiceServer) testEmbeddedByValue()                     {}

// UnsafeRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleServiceServer will
// result in compilation errors.
type UnsafeRuleServiceServer interface {
	mustEmbedUnimplementedRuleServiceServer()
}

func RegisterRuleServiceServer(s grpc.ServiceRegistrar, srv RuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedRuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuleService_ServiceDesc, srv)
}

func _RuleService_ActivateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).ActivateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_ActivateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).ActivateRule(ctx, req.(*ActivateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetCurrencyRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetCurrencyRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_GetCurrencyRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetCurrencyRules(ctx, req.(*GetCurrencyRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleService_GetCurrencyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServiceServer).GetCurrencyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuleService_GetCurrencyRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServiceServer).GetCurrencyRule(ctx, req.(*GetCurrencyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleService_ServiceDesc is the grpc.ServiceDesc for RuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "optiswift.proto.nutmeg.RuleService",
	HandlerType: (*RuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateRule",
			Handler:    _RuleService_ActivateRule_Handler,
		},
		{
			MethodName: "GetCurrencyRules",
			Handler:    _RuleService_GetCurrencyRules_Handler,
		},
		{
			MethodName: "GetCurrencyRule",
			Handler:    _RuleService_GetCurrencyRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rules.proto",
}
